from the shell:
iex : starts interactive elixir repl
elixir : compile and run a program
    example: elixir somethingcool.exs



iex commands:
h : help on some module or function
    example: h Enum.reverse/1

i : introspect some value
    example: i "hello"

c : compile and run

iex commands to study:
b/1
c/1
c/3
cd/1
clear/0
flush/0
import_file/1
l/1
ls/0
ls/1
nl/2
pid/1
pid/3
pwd/0
r/1
recompile/0
respawn/0
s/1
t/1
v/0
v/1

functions:
String.reverse "somethingthatgetreversed"
String.capitalize "capitalizeme"
Regex.run ~r{[aeiou]}, "caterpillar" -> ["a"]
Regex.scan ~r{[aeiou]}, "caterpillar" -> [["a"],["e"],["i"],["i"],["a"]]
Regex.split ~r{[aeiou]}, "caterpillar" -> ["c", "t", "rp", "ll", "r"]
Regex.replace ~r{[aeiou]}, "caterpillar", "*" -> "c*t*rp*ll*r"
make_ref
DB.save record, use_transaction: true, logging: "HIGH"

Pattern matching
_ underscore denotes wildcard in matching (doesn't match to anything, but passes)
^ pin operator forces existing value for matching

[ head | tail ] 

Built in Types:
Value types:
    Arbitrary-sized integers
    Floating-point numbers
    Atoms
    Ranges
    Regular expressions
System types:
    PIDs and ports
    References
Collection types:
    Tuples
    Lists
    Maps
    Binaries

Integers:
    Decimals: may contain _ to separate orders of 3
    No fixed limit

Floating point numbers:
    16 digits of accuracy
    Max exponent 10^308

Atoms (names)
    Use a leading Colon, followed by word or Elixir operator
    Word contains letters, digits, underscores, and @ signs

Ranges
    Ranges are represented at start..end, where those are integers

Regular expressions
    Written as ~r{regexp} or ~r{regexp}opts

TODO: regex examples

Regex options
f   Force the patter to start to match on the first line of a multiline String
g   Support named groups
i   Make matches case sensitive
m   If the string to be matched contains multiple lines, ^ and $ match thte start and end of these lines.
    \A and \z continue to match the beginning or end of the string
s   Allow . to match any newline characters
U   Normally modifiers like *  and + are greedy, matching as much as possible
u   Enable unicode-specific patterns like \p
x   Enable extended mode -- ignore whitespace and comments (# to end of line)

System Types
    PID is a reference to a local or remote process, and a port is a reference to a resource for reading or writing
    PID of current process by calling 'self'

Collection types
    Ordered collection of values (numbers, symbols, strings, etc)
    Common to match on :ok for status returns

List Operators
++ concatenation
-- set difference
in membership



Maps
%{ key => value, key => value}

How to map over a map:
%{
    "SomeKey" => somevalue,
    "SomeOtherKey" => someothervalue
}
|> Enum.map(fn ({param1, param2}) -> {dosomething} end)
|> Enum.into(%{})

How to filter